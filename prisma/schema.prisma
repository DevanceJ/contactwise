// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  password       String?
  image          String?
  isAdmin        Boolean         @default(false)
  requestedAdminAccess Boolean   @default(false)
  accounts       Account[]
  memberOf       Member[]
  creatorOf      Tenant[]
 
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Tenant {
  id          String @id @default(cuid())
  name        String
  description String?
  members       Member[]
  createdById String
  creator User @relation(fields: [createdById], references: [id])
  createdAt DateTime @default(now())
}

model Member {
  id        String @id @default(cuid())
  userId    String
  tenantId  String
  role      Role
  joiningDate DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId])
}

enum Role {
  MANAGER
  USER
}

model VerificationToken {
  id        String @id @default(cuid())
  email     String
  token     String @unique
  expiresAt DateTime
  @@unique([email, token])
}

model PasswordResetToken {
  id        String @id @default(cuid())
  email     String
  token     String @unique
  expiresAt DateTime
  @@unique([email, token])
}